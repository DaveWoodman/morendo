/* Generated By:JavaCC: Do not edit this line. CLIPSParserConstants.java */
package org.jamocha.parser.clips;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CLIPSParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT = 5;
  /** RegularExpression Id. */
  int LBRACE = 6;
  /** RegularExpression Id. */
  int RBRACE = 7;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 8;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 9;
  /** RegularExpression Id. */
  int EXPONENT = 10;
  /** RegularExpression Id. */
  int STRING_LITERAL = 11;
  /** RegularExpression Id. */
  int BIND = 12;
  /** RegularExpression Id. */
  int BIND2 = 13;
  /** RegularExpression Id. */
  int BIND3 = 14;
  /** RegularExpression Id. */
  int BIND4 = 15;
  /** RegularExpression Id. */
  int BIND5 = 16;
  /** RegularExpression Id. */
  int BINDING = 17;
  /** RegularExpression Id. */
  int BOOLEAN = 18;
  /** RegularExpression Id. */
  int AGGREGATE = 19;
  /** RegularExpression Id. */
  int ASSERT = 20;
  /** RegularExpression Id. */
  int ASSERTTEMPORAL = 21;
  /** RegularExpression Id. */
  int AUTOFOCUS = 22;
  /** RegularExpression Id. */
  int ALLOWEDVALUES = 23;
  /** RegularExpression Id. */
  int CHAININGDIRECTION = 24;
  /** RegularExpression Id. */
  int COMMAND = 25;
  /** RegularExpression Id. */
  int CUBEQUERY = 26;
  /** RegularExpression Id. */
  int DECLARE = 27;
  /** RegularExpression Id. */
  int DEFCLASS = 28;
  /** RegularExpression Id. */
  int DEFCUBE = 29;
  /** RegularExpression Id. */
  int DEFFACT = 30;
  /** RegularExpression Id. */
  int DEFFUNCTION = 31;
  /** RegularExpression Id. */
  int DEFMODULE = 32;
  /** RegularExpression Id. */
  int DEFRULE = 33;
  /** RegularExpression Id. */
  int DEFQUERY = 34;
  /** RegularExpression Id. */
  int DEFGRAPHQUERY = 35;
  /** RegularExpression Id. */
  int DEFTEMPLATE = 36;
  /** RegularExpression Id. */
  int DESCRIBECLASS = 37;
  /** RegularExpression Id. */
  int DEFAULTVALUE = 38;
  /** RegularExpression Id. */
  int DOUBLE = 39;
  /** RegularExpression Id. */
  int EXISTS = 40;
  /** RegularExpression Id. */
  int EFFECTIVE = 41;
  /** RegularExpression Id. */
  int EXPIRATION = 42;
  /** RegularExpression Id. */
  int FACTINDEX = 43;
  /** RegularExpression Id. */
  int FLOAT = 44;
  /** RegularExpression Id. */
  int HASHEDMEMORY = 45;
  /** RegularExpression Id. */
  int INTEGER = 46;
  /** RegularExpression Id. */
  int INTERVALTIME = 47;
  /** RegularExpression Id. */
  int LOGICAL = 48;
  /** RegularExpression Id. */
  int LONG = 49;
  /** RegularExpression Id. */
  int MODIFY = 50;
  /** RegularExpression Id. */
  int MULTISLOT = 51;
  /** RegularExpression Id. */
  int MULTIPLECE = 52;
  /** RegularExpression Id. */
  int NOAGENDA = 53;
  /** RegularExpression Id. */
  int NOLOOP = 54;
  /** RegularExpression Id. */
  int NUMBER = 55;
  /** RegularExpression Id. */
  int NOTCE = 56;
  /** RegularExpression Id. */
  int ONLYCE = 57;
  /** RegularExpression Id. */
  int REMEMBERALPHA = 58;
  /** RegularExpression Id. */
  int RETRACT = 59;
  /** RegularExpression Id. */
  int RULEVERSION = 60;
  /** RegularExpression Id. */
  int RELATIVETIME = 61;
  /** RegularExpression Id. */
  int SALIENCE = 62;
  /** RegularExpression Id. */
  int SEND = 63;
  /** RegularExpression Id. */
  int SHORT = 64;
  /** RegularExpression Id. */
  int SLOT = 65;
  /** RegularExpression Id. */
  int STRING = 66;
  /** RegularExpression Id. */
  int SYMBOL = 67;
  /** RegularExpression Id. */
  int TEMPORALACTIVATION = 68;
  /** RegularExpression Id. */
  int TEMPORAL = 69;
  /** RegularExpression Id. */
  int TEST = 70;
  /** RegularExpression Id. */
  int TRUE = 71;
  /** RegularExpression Id. */
  int TRUE2 = 72;
  /** RegularExpression Id. */
  int TYPEDEF = 73;
  /** RegularExpression Id. */
  int FALSE = 74;
  /** RegularExpression Id. */
  int FALSE2 = 75;
  /** RegularExpression Id. */
  int NIL = 76;
  /** RegularExpression Id. */
  int ARROW = 77;
  /** RegularExpression Id. */
  int LEFT_ARROW = 78;
  /** RegularExpression Id. */
  int ASSIGN = 79;
  /** RegularExpression Id. */
  int SEMICOLON = 80;
  /** RegularExpression Id. */
  int PLUS = 81;
  /** RegularExpression Id. */
  int MINUS = 82;
  /** RegularExpression Id. */
  int MULTIPLY = 83;
  /** RegularExpression Id. */
  int DIVIDE = 84;
  /** RegularExpression Id. */
  int GT1 = 85;
  /** RegularExpression Id. */
  int LT1 = 86;
  /** RegularExpression Id. */
  int EQ1 = 87;
  /** RegularExpression Id. */
  int EQ2 = 88;
  /** RegularExpression Id. */
  int LE1 = 89;
  /** RegularExpression Id. */
  int GE1 = 90;
  /** RegularExpression Id. */
  int NE1 = 91;
  /** RegularExpression Id. */
  int NE2 = 92;
  /** RegularExpression Id. */
  int AND1 = 93;
  /** RegularExpression Id. */
  int AND2 = 94;
  /** RegularExpression Id. */
  int OR1 = 95;
  /** RegularExpression Id. */
  int OR2 = 96;
  /** RegularExpression Id. */
  int TILDA = 97;
  /** RegularExpression Id. */
  int IDENTIFIER = 98;
  /** RegularExpression Id. */
  int LETTER = 99;
  /** RegularExpression Id. */
  int DIGIT = 100;
  /** RegularExpression Id. */
  int PATH_LITERAL = 101;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<COMMENT>",
    "\"(\"",
    "\")\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<BIND>",
    "<BIND2>",
    "<BIND3>",
    "<BIND4>",
    "<BIND5>",
    "\"bind\"",
    "\"BOOLEAN\"",
    "\"aggregate\"",
    "\"assert\"",
    "\"assert-temporal\"",
    "\"auto-focus\"",
    "\"allowed-values\"",
    "\"chaining-direction\"",
    "\"command\"",
    "\"cubequery\"",
    "\"declare\"",
    "\"defclass\"",
    "\"defcube\"",
    "\"deffact\"",
    "\"deffunction\"",
    "\"defmodule\"",
    "\"defrule\"",
    "\"defquery\"",
    "\"defgraphquery\"",
    "\"deftemplate\"",
    "\"describe-class\"",
    "\"default\"",
    "\"DOUBLE\"",
    "\"exists\"",
    "\"effective-date\"",
    "\"expiration-date\"",
    "\"fact-index\"",
    "\"FLOAT\"",
    "\"hashed-memory\"",
    "\"INTEGER\"",
    "\"interval-time\"",
    "\"logical\"",
    "\"LONG\"",
    "\"modify\"",
    "\"multislot\"",
    "\"multiple\"",
    "\"no-agenda\"",
    "\"no-loop\"",
    "\"NUMBER\"",
    "\"not\"",
    "\"only\"",
    "\"remember-alpha\"",
    "\"retract\"",
    "\"rule-version\"",
    "\"relative-time\"",
    "\"salience\"",
    "\"send\"",
    "\"SHORT\"",
    "\"slot\"",
    "\"STRING\"",
    "\"symbol\"",
    "\"temporal-activation\"",
    "\"temporal\"",
    "\"test\"",
    "\"TRUE\"",
    "\"true\"",
    "\"type\"",
    "\"FALSE\"",
    "\"false\"",
    "\"nil\"",
    "\"=>\"",
    "\"<<=\"",
    "\"<-\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"eq\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"!=\"",
    "\"and\"",
    "\"&\"",
    "\"or\"",
    "\"|\"",
    "\"~\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<PATH_LITERAL>",
  };

}
